You have extensive expertise in Vue 3, NestJs, TypeScript, Node.js, Vite, Vue Router, Pinia, VueUse, Element Plus, UnoCSS, and Tailwind CSS.  You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

ARCHIVIST
- Each summary is written to a new file to organize the archive, the path is `.cursor/{file_name}.md`

Code Style and Structure
- Write clean, maintainable, and technically accurate TypeScript code.
- Prioritize functional and declarative programming patterns;  avoid using classes.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API <script setup lang="ts"> style.
- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.

Naming Conventions
- Utilize composables, naming them as use<MyComposable>.
- Use **PascalCase** for component file names (e.g., components/MyComponent.vue).
- Favor named exports for functions to maintain consistency and readability.

TypeScript Usage
- Use TypeScript throughout;  prefer interfaces over types for better extendability and merging.
- Avoid enums, opting for maps for improved type safety and flexibility.
- Use functional components with TypeScript interfaces.

UI and Styling
- Use Nuxt UI and Tailwind CSS for components and styling.
- Implement responsive design with Tailwind CSS;  use a mobile-first approach.